BASE=${PWD}
SCRIPT_DIR="$(readlink -f "$(dirname "$(type -p "$0")")")"
CACHE_DIR="${CACHE_DIR:-$HOME/.upatch}"
SOURCE_DIR="${CACHE_DIR}/source"
PATCH_DIR="${CACHE_DIR}/patch"
OUTPUT_DIR="${CACHE_DIR}/output"
LOGFILE="${CACHE_DIR}/build.log"
DEBUG=0
UPATCHS=""
declare -a DIFFER_LIST
declare -A objMap

warn() {
	echo "ERROR: $1" >&2
}

die() {
    if [[ -z "$1" ]]; then
        msg="upatch build failed"
    else
        msg="$1"
    fi

    if [[ -e "$LOGFILE" ]]; then
        warn "$msg. Check $LOGFILE for more details."
    else
        warn "$msg."
    fi

    exit 1
}

verify_kmod() {
    [[ -n $(lsmod|grep upatch) ]] || die "don't have upatch mod"
    # check upatch is right
}

find_dirs() {
	if [[ -e "${SCRIPT_DIR}/build/create-diff-object" ]]; then
		# git repo
		TOOLS_DIR="${SCRIPT_DIR}/build"
	else
		return 1
	fi
}

gcc_version_from_file() {
	"${READ_ELF}" -p .comment "$1" | grep -m 1 -o 'GCC:.*'
}

compiler_check() {
	local c="${CACHE_DIR}/test.c" o="$CACHE_DIR/test.o"
	local out gccver kgccver

	# gcc --version varies between distributions therefore extract version
	# by compiling a test file and compare it to vmlinux's version.
	echo 'void main(void) {}' > "${c}"
	out="$("${COMPILER}" -c -pg -ffunction-sections -o "${o}" "${c}" 2>&1)"
	gccver="$(gcc_version_from_file "${o}")"

	if [[ -n "${out}" ]]; then
		warn "gcc >= 4.8 required for -pg -ffunction-settings" && die "gcc output: ${out}"
		return 1
	fi

	rm -f "${c}" "${o}"
	return
}

create_obj_map(){
    # shellcheck disable=SC2045
    for patch_file in $(ls "${SOURCE_DIR}")
    do
        if [[ -f "${SOURCE_DIR}/${patch_file}" ]] && [[ "${patch_file}" =~ [.][o]$ ]];then
            # DW_TAG_compile_unit have 8 attributes
            local patch_path=$(${READ_ELF} --debug-dump=info "${SOURCE_DIR}/${patch_file}" | grep -A 8 "DW_TAG_compile_unit*" | grep "DW_AT_name" | head -n 1 | awk -F " " '{print $NF}')
            [[ -z ${patch_path} ]] && die "get ${SOURCE_DIR}/${patch_file} file_path error"
            sourceMap["${patch_path}"]="${patch_file}"
        fi
    done


    # shellcheck disable=SC2045
    for patch_file in $(ls "${PATCH_DIR}")
    do
        if [[ -f "${PATCH_DIR}/${patch_file}" ]] && [[ "${patch_file}" =~ [.][o]$ ]];then
            # DW_TAG_compile_unit have 8 attributes
            local patch_path=$(${READ_ELF} --debug-dump=info "${PATCH_DIR}/${patch_file}" | grep -A 8 "DW_TAG_compile_unit*" | grep "DW_AT_name" | head -n 1 | awk -F " " '{print $NF}')
            [[ -z ${patch_path} ]] && die "get ${PATCH_DIR}/${patch_file} file_path error"
            patchMap["${patch_path}"]="${patch_file}"
        fi
    done
}

# choose the collect2 which have "-o running_file"
check_binary() {
    local OLD_IFS=$IFS
    IFS=" "
    local args=(${1#*-o })
    if [[ $(basename "${args[0]}") == $(basename "${RUNNING_FILE}") ]];then
        return 0
    fi
    IFS=$OLD_IFS
    return 1
}

differ_obj() {
    for arg in $1;
    do
        if [[ "${arg}" =~ [.][o]$ ]];then
            local obj_name="$(basename ${arg})"
            local file_name=${obj_name/.o/.c}
            if [[ -f "$2/${patchMap["${file_name}"]}" ]];then
                # echo "patch_file: $2/${patchMap["${file_name}"]}     source_file: $3/${sourceMap[${file_name}]}"
                # use create-differ-object to create upatch
                if [[ -f "$2/${patchMap["${file_name}"]}" && -f "$3/${sourceMap[${file_name}]}" ]];then
                    "${TOOLS_DIR}"/create-diff-object -s "$3/${sourceMap[${file_name}]}" -p "$2/${patchMap["${file_name}"]}" -r "${RUNNING_FILE}" -o "${OUTPUT_DIR}/${obj_name}" -d >> ${LOGFILE} #|| die "differ $2/${arg} error"
                fi
            fi
        fi
    done
    return 1
}

choose_binary_differ() {
    local ld_args=$(cat $1/log | grep "${COLLECT}")
    local flag=1
    local OLD_IFS=$IFS
    local binary_args;
    IFS=$'\n'
    for line in ${ld_args};
    do
        if check_binary "${line}";then
            [ ${flag} -eq 0 ] && die "Multiple binaries with the same name were built"
            binary_args=$line
            flag=0
        fi
    done
    IFS=$OLD_IFS
    # choose obj to differ with source
    differ_obj "${binary_args}" $1 $2
}

print_Map() {
    for key in ${!objMap[*]};do
      echo $key ${objMap[$key]}
    done
}

usage() {
	echo "usage: $(basename "$0") [options] <patch1 ... patchN>" >&2
	echo "		patchN                  Input patchfile(s)" >&2
	echo "		-h, --help              Show this help message" >&2
	echo "		-s, --sourcedir         Specify source directory" >&2
	echo "		-b, --buildfile         Specify build file, in source dir" >&2
	echo "		-r, --runningfile       Specify original runningfile" >&2
	echo "		-c, --compiler          Specify compiler" >&2
	echo "		-o, --output            Specify output folder" >&2
}

while [[ $# -gt 0 ]]; do
    case "$1" in
    -h|--help)
        usage
        exit 0;;
    -s|--sourcedir)
        # [[ ! -d "$2" ]] && die "source dir '$2' not found"
        USER_SRC_DIR="$(readlink -f "$2")"
        shift ;;
    -b|--buildfile)
        # [[ ! -f "$2" ]] && die "build file '$2' not found"
        BUILD_FILE="$(readlink -f "$2")"
        shift ;;
    -r|--runningfile)
        # [[ ! -f "$2" ]] && die "patch dir '$2' not found"
        RUNNING_FILE="$(readlink -f "$2")"
        shift ;;
    -c|--compiler)
        # [[ ! -f "$2" ]] && die "compiler '$2' not found"
        COMPILER="$(readlink -f "$2")"
        shift ;;
	-o|--output)
		[[ ! -d "$2" ]] && die "output dir '$2' not found"
		OUTPUT_DIR="$(readlink -f "$2")"
		shift
		;;
	*)
		[[ "$1" = "--" ]] && shift && continue
		[[ ! -f "$1" ]] && die "patch file '$1' not found"
		DIFFER_LIST+=("$(readlink -f "$1")")
		;;
	esac
	shift
done

# ensure cachedir and tempdir are setup properly and cleaned
mkdir -p "${SOURCE_DIR}" || die "Couldn't create ${SOURCE_DIR}"
mkdir -p "${PATCH_DIR}" || die "Couldn't create ${PATCH_DIR}"
mkdir -p "${OUTPUT_DIR}" || die "Couldn't create ${OUTPUT_DIR}"
rm -rf "${SOURCE_DIR:?}"/*
rm -rf "${PATCH_DIR:?}"/*
rm -rf "${OUTPUT_DIR:?}"/*
rm -f "$LOGFILE"

if [[ ${#DIFFER_LIST[@]} -eq 0 ]]; then
	warn "no differ file(s) specified"
	usage
	exit 1
fi

# copy source code and patch differ file
cp -r "${USER_SRC_DIR}" "${CACHE_DIR}" || die "Couldn't cp ${USER_SRC_DIR}"

# check mod
verify_kmod

find_dirs || die "can't find supporting tools - ./build/create-diff-object"

# check compiler
[[ -z ${COMPILER} ]] && COMPILER="$(readlink -f "$(which gcc)")"
[[ ! -e "${COMPILER}" ]] && die "can't find compiler"
READ_ELF="$(${COMPILER} -print-prog-name=readelf)"
AS=$(which "$(${COMPILER} -print-prog-name=as)")
COLLECT=$(which "$(${COMPILER} -print-prog-name=collect2)")
LD=$(which "$(${COMPILER} -print-prog-name=ld)")
compiler_check || die

# TODO
#echo ${COMPILER} > /sys/kernel/upatch/compiler_path
#echo ${AS} > /sys/kernel/upatch/assembler_path

# build source
cd ${CACHE_DIR}/$(basename ${USER_SRC_DIR})
UPATCH_CMD="SE" UPATCH_OUTPUT="${SOURCE_DIR}" ./$(basename ${BUILD_FILE})
mv "${CACHE_DIR}"/log "${SOURCE_DIR}"/log

# build patch
cd ${CACHE_DIR}/$(basename ${USER_SRC_DIR})
for differ in "${DIFFER_LIST[@]}"; do
    patch -N -p1 < "$differ" || die "$differ file failed to apply"
done

UPATCH_CMD="PE" UPATCH_OUTPUT="${PATCH_DIR}" ./$(basename ${BUILD_FILE})
mv "${CACHE_DIR}"/log "${PATCH_DIR}"/log

cd ${PWD}
rm -rf ${CACHE_DIR}/$(basename ${USER_SRC_DIR})

# correlate obj name
declare -A sourceMap
declare -A patchMap
create_obj_map
#correlate_obj
#print_Map

# choose the binary's obj create upatch file
choose_binary_differ "${PATCH_DIR}" "${SOURCE_DIR}"

# ld patchs
if [[ -z $(find ${OUTPUT_DIR} -name "*.o") ]];then
    echo "no changed functions were found"
else
    ${LD} -r -o "${CACHE_DIR}"/result $(find ${OUTPUT_DIR} -name "*.o") || die "merge patchs error"
    echo "SUCCESS! result is ${CACHE_DIR}/result"
fi